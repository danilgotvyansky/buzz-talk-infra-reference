name: Build&Test | Application CI

on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.x]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create Docker network
      run: |
        docker network create --subnet=172.20.0.0/16 my_custom_network

    - name: Set up MariaDB
      run: |
        echo "GRANT ALL PRIVILEGES ON \`test_database\`.* TO 'user'@'%';
        GRANT ALL PRIVILEGES ON \`database\`.* TO 'user'@'%';
        FLUSH PRIVILEGES;" > init.sql
        docker run --name mariadb -d \
        --net my_custom_network \
        --ip 172.20.0.2 \
        -e MARIADB_ROOT_PASSWORD='${{ secrets.DB_PASSWORD }}' \
        -e MARIADB_DATABASE='database' \
        -e MARIADB_USER='user' \
        -e MARIADB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
        -v $PWD/init.sql:/docker-entrypoint-initdb.d/init.sql \
        -p 3306:3306 \
        mariadb:10.6 \
        --character-set-server=utf8 --collation-server=utf8_bin \
        --init-file /docker-entrypoint-initdb.d/init.sql
        docker ps

    - name: MariaDB Health Check
      run: |
        timeout=300  # Timeout in seconds (5 minutes)
        start_time=$(date +%s)
        until echo 'SHOW DATABASES;' | docker exec -i mariadb mariadb -uroot -p${{ secrets.DB_PASSWORD }} > /dev/null; do
          current_time=$(date +%s)
          elapsed_time=$((current_time - start_time))
          if [ $elapsed_time -ge $timeout ]; then
            echo "Timed out waiting for MariaDB instance to be available."
            exit 1
          fi
          sleep 1
          echo "Waiting for MariaDB instance to be available..."
        done

    - name: Build Testing Docker Image
      run: |
        docker build -t ghcr.io/buzz-talk/buzz-talk-backend:latest .

    - name: Run Testing Docker Container
      run: |
        docker run -d \
        --name backend-testing \
        --net my_custom_network \
        --ip 172.20.0.3 \
        --env-file .env \
        -e MYSQL_DB_NAME='database' \
        -e MYSQL_DB_USER='user' \
        -e MYSQL_DB_HOST='172.20.0.2' \
        -e MYSQL_DB_PORT='3306' \
        -e MYSQL_DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
        -e DB_ENGINE='django.db.backends.mysql' \
        -e DEBUG='True' \
        --restart unless-stopped \
        -p 8000:8000 \
        ghcr.io/buzz-talk/buzz-talk-backend:latest
        docker exec backend-testing python manage.py migrate

    - name: Run Tests
      run: |
        docker exec backend-testing python manage.py test
